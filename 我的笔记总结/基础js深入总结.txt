	基础js深入总结
一、数据类型：
	1、分类：（分两大类）
		（1）基本类型（也叫值类型）
			* Number: 任意数值
			* String: 任意文本
			* Boolean: true/false
			* undefined: undefined
			* null: null
		（2）对象类型（也叫引用类型）
			* Object: 任意对象（一般用于存无序的数据）
			* Array: 特别的对象类型(下标/内部数据有序)（一般用于存有序的数据）
			* Function: 特别的对象类型(可执行)（一般用于存重复执行的代码）			
	2、判断类型：
		（1）typeof: 返回的是数据类型的字符串表达式
			1) 可以区别：数值、字符串、布尔值、undefined、function
			2）不能区别：null与对象，一般对象与数组
		（2）instanceof:
			专门用来判断对象数据的具体类型：Object,Array与Function
		（3）=== ：全等
			可以判断： undefined 和 null  （因为undefined 和 null都是只有一个值，所以可以用全等判断）
			
		// 1、基本类型的判断例子
		  var a
		  console.log(a, typeof a, a === 'undefined')  // undefined "undefined" false
		  console.log(a, typeof a, a === undefined)  // undefined "undefined"  true
		  console.log(a === typeof a)   // false 因为a是undefined，后者是"undefined"
		  a = 6
		  console.log(typeof a, typeof a === 'number')   // number true
		  a = 'hello world'
		  console.log(typeof a, typeof a === 'string')    // string true
		  a = true
		  console.log(typeof a, typeof a === 'boolean')   //  boolean true
		  a = null
		  console.log(typeof a)  // object
		  console.log(a === null)  // true    null 不能用 typeof 来检查，要用全等来检查
  
		 // 2、对象类型的例子
		  var b1 = {
			  b2: [2, 'abc', console.log],
			  b3: function () {
				  console.log('b3()')
			  }
		  }
		  console.log(b1 instanceof Object, typeof b1) // true "object"
		  console.log(b1.b2 instanceof Array, typeof b1.b2) // true "object"
		  console.log(b1.b3 instanceof Function, typeof b1.b3) // true "function"

		  console.log(typeof b1.b2[2]) // function  注意console.log(),log是个函数
		  /*
			b1.b2[2]('aaa')调用了console.log输出了aaa，但是console.log()函数没有返回值，
			  即为undefined，console.log(b1.b2[2]('aaa'))最后相当于执行console.log(undefined)
			  所以最后输出的是undefined
		   */
		  console.log(b1.b2[2]('aaa')) // aaa   undefined
	3、undefined与null的区别
		undefined代表没有赋值；null代表赋值了, 只是值为null
	4、什么时候给变量赋值为null呢?
		（1）在程序的前面：起暗示作用，后面会赋值为对象，进行计算，处理产生对象并保存
		* var a = null //a将指向一个对象, 但对象此时还没有确定（初始化变量a）
		（2）中间给b赋值
			b = {
					name: 'Tom'，
					age: 12
			  }
		（3）在程序的后面：b指向的对象就没有了指向它的引用，就称为垃圾对象从而被垃圾器回收
				但是因为b时全局变量，b并没有释放，而是一致存在,只是之前被对象占用的内存被释
				放了，其他数据可以来使用b所在的内存了
		* a = null //让a指向的对象成为垃圾对象 （结束时将a=null，释放资源）
	5、严格区别变量类型与数据类型?
		  * js的变量本身是没有类型的, 变量的类型实际上是变量内存中数据的类型
		  * 变量类型:
			* 基本类型: 保存基本类型数据的变量
			* 引用类型: 保存对象地址值的变量
		  * 数据对象
			* 基本类型
			* 对象类型

二、数据-变量-内存
	1. 什么是数据?
		* 存储于内存中代表特定信息的'东东', 本质就是0101二进制
		* 具有可读和可传递的基本特性：一般等号左边的就是写操作，其他的都是读操作
		* 万物(一切)皆数据, 函数也是数据（如何证明函数也是数据：函数传一个函数）
		* 程序中所有操作的目标: 都是数据
			* 算术运算
			* 逻辑运算
			* 赋值
			* 调用函数传参
	2. 什么是内存?
	  * 内存条通电后产生的存储空间(临时的)
	  * 产生和死亡: 内存条(集成电路板)==>通电==>产生一定容量的存储空间==>存储各种数据==>断电==>内存全部消失
	  * 内存的空间是临时的, 而硬盘的空间是持久的
	  * 一块内存包含2个数据
		* 内部存储的数据(一般数据/地址数据)
		* 内存地址值数据
	  * 内存分类
		* 栈: 全局变量, 局部变量 (空间较小)
		* 堆: 对象 (空间较大)
	3. 什么是变量?
	  * 值可以变化的量, 由变量名与变量值组成
	  * 一个变量对应一块小内存, 变量名用来查找到内存, 变量值就是内存中保存的内容
	4. 内存,数据, 变量三者之间的关系
	  * 内存是一个容器, 用来存储程序运行需要操作的数据
	  * 变量是内存的标识, 我们通过变量找到对应的内存, 进而操作(读/写)内存中的数据
	  
	5、问题: var a = xxx, a内存中到底保存的是什么?
		这要取决于xxx的值是什么类型的，举例说明：
			var a = 3  // a保存的3， 是基本类型变量
			a = {}  //ａ　保存的是{}的地址值，是与引用类型变量
			var b = 'abc'
			a = b　// a 保存的时 b 的值（'abc'）,是基本类型变量
			b = []
			a = b  // a 保存的是b的值（地址值），是引用类型变量
	6、关于引用变量赋值问题
		* 2个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 另一个引用变量也看得见
			  var obj1 = {}
			  var obj2 = obj1
			  obj2.name = 'Tom'
			  console.log(obj1.name)   // Tom
			  function f1(obj) {  // obj = obj2 ,那么此时obj/obj1/obj2三个变量都指向同一个对象{}
				obj.age = 12    // 任意一个引用变量来修改对象内部的数据，其他两个引用变量也看得见
			  }
			  f1(obj2)
			  console.log(obj1.age)   // 12
			
		* 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象，
				修改其中一个变量不会引起另一个变量的变化
			   var obj3 = {name: 'Tom'}
			   var obj4 = obj3
			   obj3 = {name: 'JACK'}
			   console.log(obj4.name)    // Tom ，obj4还是指向{name: 'Tom'}对象，而obj3指向的是{name: 'JACK'}对象
			   function f2(obj) {  // obj = obj4
				 obj = {name: 'Bob'}  // 这一步将 obj 切断对obj4指向的对象的引用，重新指向另一个新对象{name: 'Bob'}
			   }
			   f2(obj4)
			   console.log(obj4.name)   // Tom
	7、问题: 在js调用函数时传递变量参数时, 是值传递还是引用传递
		  * 只有值传递, 没有引用传递, 传递的都是变量的值, 只是这个值可能是基本数据, 也可能是地址(引用)数据
		  * 如果后一种看成是引用传递, 那就值传递和引用传递都可以有
				  function f(a) {
					console.log(a)  // 4
				  } 
				  var n = 4
				  f(n) //传递的是n的值 --->值传递
				  
				  function f2(a) {
					a.name = 'atguigu'
				  }
				  n = {}
				  f2(n) // 如果说是值传递（传递的是变量的值），如果说是引用传递（传递的n的值是引用类型）
				  console.log(n.name)  // atguigu
	8、问题: JS引擎如何管理内存?
		  （1） 内存生命周期
				1). 分配需要的内存
				2). 使用分配到的内存
				3). 不需要时将其释放/归还
		  （2） 释放内存
				* 为执行函数分配的栈空间内存: 函数执行完自动释放
				* 存储对象的堆空间内存: 当内存没有引用指向时, 对象成为垃圾对象, 垃圾回收器后面就会回收释放此内存
		  （3）举例：
				  var obj = {}
				  obj = null // obj变量因为是全局的所以还在，{}对象所占用的内存被释放了，其他数据可以使用该内存
				  function fn () {
					var a = 3
					var b = {}
				  }
				  fn() // 执行完后b，c是立即释放，c指向的对象{}在后面的某个时刻被垃圾器回收释放
三、对象
	1. 什么是对象?
		  * 代表现实中的某个事物, 是该事物在编程中的抽象
		  * 多个数据的集合体(封装体)
		  * 用于保存多个数据的容器
	2. 为什么要用对象?
		* 便于对多个数据进行统一管理
	3. 对象的组成
		  * 属性
			* 代表现实事物的状态数据
			* 由属性名和属性值组成
			* 属性名都是字符串类型, 属性值是任意类型
		  * 方法
			* 代表现实事物的行为数据
			* 是特别的属性==>属性值是函数
	4. 如何访问对象内部数据?
		  * .属性名: 编码简单, 但有时不能用（比如属性名中有其他特殊符号，或者属性名是个变量）
		  * ['属性名']: 编码麻烦, 但通用（不管属性名是什么样子的都可以使用）
				// 创建对象
				  var p = {
					name: 'Tom',
					age: 12,
					setName: function (name) {
					  this.name = name
					},
					setAge: function (age) {
					  this.age = age
					}
				  }
				// 访问对象内部数据
				  console.log(p.name, p['age'])  // Tom 12
				  p.setName('Jack')
				  p['setAge'](23)
				  console.log(p['name'], p.age)   // Jack  23
	5、问题: 什么时候必须使用['属性名']的方式?
			* 属性名不是合法的标识名 （即属性名中有其他特殊符号）
			* 属性名不确定 （即属性名是个变量）
				 p['content-type'] = 'text/json'
				 var prop = 'xxx'
				 var value = 123
				 p[prop] = value
				 console.log(p['content-type'], p[prop])    // text/json 123
  
	6、对象的面试题
		/*
		  因为属性名必须是字符串，所以当传入的属性名是个变量，值是对象时，内部会调用该对象的toString()方法
		  来得到字符串的属性名：a['[object Object]'] = 4,a[obj1]和a[obj2]通过toString()转换后都是
		  得到相同的[object Object]，所以它们分别赋值实际是在给[object Object]重新赋值，如果属性名
		  是个变量，值是数组，那就看数组是否一样，如果一样后面就是赋值操作，如果不一样那就互不影响
		*/
			  var a = {}
			  var obj1 = {n: 2}
			  var obj2 = {m: 3}
			  console.log(obj1.toString())   // [object Object]
			  a[obj1] = 4   //  a['[object Object]'] = 4
			  a[obj2] = 5   //  a['[object Object]'] = 5 在这里只是相当于给a['[object Object]']重新赋值了
			  console.log(a[obj1]) // 5
			  var arr1 = [1, 2]   // arr1保存的是数组[1, 2]的地址值，
			  var arr2 = [3, 4]   // arr2保存的是数组[3, 4]的地址值
			  var arr3 = [3, 4]    // arr3保存的是数组[3, 4]的地址值
			  a[arr1] = 6    // 相当于a['[1, 2]的地址值'] = 6
			  a[arr2] = 8    // 相当于a['[3, 4]的地址值'] = 8
			  a[arr3] = 10   // 相当于a['[3, 4]的地址值'] = 10  ,即也是给a['[3, 4]的地址值']重新赋值
			  console.log(a[arr1])   // 6
			  console.log(a[arr2])   // 10  后面给a['[3, 4]的地址值']重新赋值了
  
四、函数
	1. 什么是函数?
		  * 具有特定功能的n条语句的封装体
		  * 只有函数是可执行的, 其它类型的数据是不可执行的
		  * 函数也是对象
	2. 为什么要用函数?
		  * 提高代码复用
		  * 便于阅读和交流
	3. 如何定义函数?
		  * 函数声明
		  * 表达式
		   function f1 () { // 函数声明
			 console.log('f1()')
		  }
		   var f2 = function () { // 表达式
			 console.log('f2()')
          }
	4. 如何调用(执行)函数?
		  * test()   直接调用
		  * new test()  new 调用
		  * test.call/apply(obj)  通过函数的对象的call、applay()调用
	5、如何证明函数也是对象？
		  function fn() {

		  }
		  console.log(fn instanceof Object) //  true  是Object类型的实例
		  console.log(fn.prototype) // {constructor: ƒ}  内部有属性
		  console.log(fn.toString)  // ƒ toString() { [native code] }  内部有方法
		  console.log(fn.call) // ƒ call() { [native code] } 内部有方法
		  fn.t1 = 'atguigu' // 可以添加属性
		  fn.t2 = function () { // 可以添加方法
			console.log('t2() '+this.t1)    // t2() atguigu
		  }
		  fn.t2()
	6. 什么函数才是回调函数?
		  * 自己定义的
		  * 自己没有直接调用
		  * 但最终它执行了(在特定条件或时刻)
	7. 常见的回调函数?
		  * DOM事件函数
		  * 定时器函数
		  * ajax回调函数(后面学)
		  * 生命周期回调函数(后面学)
		   //1. DOM事件函数
			  var btn = document.getElementById('btn')
			  btn.onclick = function () {
				alert(this.innerHTML)
			  }

		   //2. 定时器函数
			  setInterval(function () {
				alert('到点啦!')
			  }, 2000)
	8、IIFE 
		* 全称: Immediately-Invoked Function Expression 立即调用函数表达式
		* 别名: 匿名函数自调用（自调函数）
		* 作用：
		  * 隐藏内部实现
		  * 不污染外部命名空间
			  (function (i) {
					var a = 4
					function fn() {
					  console.log('fn ', i+a)   //   fn  7
					}
					fn()
			  })(3)
			  
	9、函数中的 this 
		本质上任何函数在执行时都是通过某个对象调用的
		（1）this 是什么？
			  * 一个关键字, 一个内置的引用变量
			  * 在函数中都可以直接使用this
			  * this代表调用函数的当前对象
			  * 在定义函数时, this还没有确定, 只有在执行时才动态确定(绑定)的
		（2）如何确定this的值?
			  * test() ：  window
			  * obj.test() ：  obj
			  * new test() ：  新创建的实例对象
			  * test.call(obj) ：  obj
			  * DOM 事件回调函数 ：绑定事件的 dom 元素
			  * 定时器回调函数 ：window
			  * ajax 回调函数 ： window
			  * 数字遍历相关方法(map,forEach,filter)回调函数 ： window
			  
							function Person(color) {
								console.log(this)
								this.color = color;
								this.getColor = function () {
								  console.log(this)
								  return this.color;
								};
								this.setColor = function (color) {
								  console.log(this)
								  this.color = color;
								};
							}
							  Person("red"); //this是谁?   window
							  var p = new Person("yello"); //this是谁?  p
							  p.getColor(); //this是谁?  p
							  var obj = {};
							  p.setColor.call(obj, "black"); //this是谁?  obj
							  var test = p.setColor;
							  test(); //this是谁?    window
							  function fun1() {
								function fun2() {
								  console.log(this);
								}
								fun2(); //this是谁?    window
							  }
							  fun1();
							  
-----------------------------------------------------------------------------------------------------------------						  
		函数高级 	
一、函数高级
	1、原型
		（1） 函数对象的prototype属性(图)
			  * 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)，所以prototype是引用类型变量
				console.log(Date.prototype, typeof Date.prototype) 
				//{constructor: ƒ, toString: ƒ, toDateString: ƒ, toTimeString: ƒ, toISOString: ƒ, …} "object"
				function fn() {}
				console.log(fn.prototype, typeof fn.prototype)  // {constructor: ƒ} "object"
			  * 原型对象中有一个属性constructor, 它指向函数对象 
				console.log(Date.prototype.constructor===Date)   // true
				console.log(fn.prototype.constructor===fn)   // true
		（2） 给原型对象添加属性(一般都是方法)
			  * 作用: 函数的所有实例对象自动拥有原型中的属性(方法)
					  function F() { }
					  F.prototype.age = 12 //添加属性
					  F.prototype.setAge = function (age) { // 添加方法
						  console.log(this)   // f
						this.age = age
					  }
					  // 创建函数的实例对象
					  var f = new F()
					  console.log(f.age)   // 12
					  f.setAge(23)
					  console.log(f.age)   // 23
		（3）显示原型和隐式原型
				1） 每个函数function都有一个prototype属性，即显式原型（是给实例的隐式原型用的）
					* 该属性是在定义函数时自动添加的, 默认值是一个空Object对象
					* 函数对象一旦创建，JS引擎会自动给构造函数（比如Fn构造函数）做两件事：
							Fn.prototype = {}    Fn.prototype.constructor = Fn
				2） 每个实例对象都有一个__proto__属性，可称为隐式原型
					* 该属性创建对象时自动添加的, 默认值为构造函数的prototype属性值（该值就是空Object对象的地址值）
						* 实例对象一旦创建，JS引擎会自动给该对象添加： this.__proto__ = Fn.prototype  (this就是该实例对象)
				3） 对象的隐式原型的值为其对应构造函数的显式原型的值
				4） 内存结构(图)
	2、原型链（也叫隐式原型链）
		（1）概念：访问一个对象的属性时，先在自身属性中查找，找到返回；
				如果没有找到，则再沿着__proto__这条链向上查找，找到返回；
				如果最终也没有找到，则返回undefined （注意区别作用域链查找变量最终找不到是报错的）
		（2）作用：用于查找对象的属性或方法（注意作用域链是用于查找变量的）
				function Fn() {
					this.test1 = function () {
					  console.log('test1()')
					}
				}
				Fn.prototype.test2 = function () {
					console.log('test2()')
				}
				var fn = new Fn()

				fn.test1()   // test1()
				fn.test2()   //  test2()
				console.log(fn.toString())   // [object Object]
				console.log(fn.test3)    // undefined
				fn.test3()  // 因为fn.test3是undefined，所以调用时会报错fn.test3不是函数
				
		（3）原型链属性问题
			1）读取对象的属性值时: 会自动到原型链中查找
			2）设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值
			3）方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上
		（4）instanceof 是如何判断的？
				* 表达式: A instanceof B
				* 如果B函数的显式原型对象在A对象的原型链上, 返回true, 否则返回false
			1） Function是通过new自己产生的实例
			
			 //案例1
				  function Foo() {  }
				  var f1 = new Foo();
				  console.log(f1 instanceof Foo);   // true
				  console.log(f1 instanceof Object);   // true
			//案例2
				  console.log(Object instanceof Function)  // true  Object是函数，是通过Function  new出来的
				  console.log(Object instanceof Object)  //   true   Object是通过Objec new出来的
				  console.log(Function instanceof Object)   // true  Object的显示原型在Function的隐式原型链上
				  console.log(Function instanceof Function)  //true  Function通过自己new自己出来的
				  function Foo() {}
				  console.log(Object instanceof  Foo);  //　false

				  console.log(Function.prototype.__proto__ )
				  //{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}
				  Function.prototype.__proto__ = Object.prototype   // Function.prototype是没有隐式原型的，是人为给它指定的
				  console.log(Object.prototype )
				  //{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}	
		（5）原型面试题
			 1）测试题1
				  var A = function() {}
				   var b = new A()
				  console.log(b.n)  // undefined
				  A.prototype.n = 1   // 通过显示原型给原型对象添加属性，所有对象都有影响
				  var b = new A()
				  console.log(b.n)   // 1

				  A.prototype = {  //改变显示原型指向，对前面创建的对象没有影响
					n: 2,
					m: 3
				  }
				  var c = new A()
				  console.log(b.n, b.m, c.n, c.m)  // 1  undefined  2  3
			  2） 测试题2
				  var F = function(){};
				  Object.prototype.a = function(){
					console.log('a()')
				  };
				  Function.prototype.b = function(){
					console.log('b()')
				  };
				  var f = new F();
				  f.a()    // a()
				  F.a()   // a()
				  F.b()   // b()
				  //  f.b()  //　报错  ｆ instanceof Function  --> false　
				  
	3、执行上下文与执行上下文栈
		（1）变量提升函数提升
			1）变量声明提升：通过var定义(声明)的变量, 在定义语句之前就可以访问到，值为: undefined
			2）函数声明提升：通过function声明的函数, 在声明函数函数的代码之前就可以直接调用，值为: 函数定义(对象)
	
		（2）执行上下文（分全局和函数两类）
			1） 代码分类(位置)
				  * 全局代码
				  * 函数代码
			2） 全局执行上下文
				  * 在执行全局代码前将window确定为全局执行上下文
				  * 对全局数据进行预处理
						* var定义的全局变量==>undefined, 添加为window的属性
						* function声明的全局函数==>赋值(fun), 添加为window的方法
						* this==>赋值(window)
				  * 开始执行全局代码
			3） 函数执行上下文
				  * 在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象（并不是真实的JS对象,只是一个虚拟的对象）
				  * 对局部数据进行预处理
					* 形参变量==>赋值(实参)==>添加为执行上下文的属性
					* arguments==>赋值(实参列表), 添加为执行上下文的属性
					* var定义的局部变量==>赋值(undefined), 添加为执行上下文的属性
					* function声明的函数 ==>赋值(fun), 添加为执行上下文的方法
					* this==>赋值(调用函数的对象)
				  * 开始执行函数体代码
			4）	总结：n+1个执行上下文（n表示函数调用的次数，1表示全局上下文，有且只有一个全局上下文）
		（3）执行上下文栈	
				1） 在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象
				2） 在全局执行上下文(window)确定后, 将其添加到栈中(压栈)
				3） 在函数执行上下文创建后, 将其添加到栈中(压栈)
				4） 在当前函数执行完后,将栈顶的对象移除(出栈)
				5） 当所有的代码执行完后, 栈中只剩下window
												//1. 进入全局执行上下文
					  var a = 10
					  var bar = function (x) {
						var b = 5
						foo(x + b)              //3. 进入foo执行上下文
					  }
					  var foo = function (y) { // y = x+b
						var c = 5
						  // 30 在bar函数中调用foo,传入实参 x + b, console.log(a + c + x +b) ,console.log(10 + 5 + 10 +5)
						console.log(a + c + y)  // 30
					  }
					  bar(10)                    //2. 进入bar函数执行上下文
							
	4、作用域与作用域链
		（1）作用域
			1）理解：代码段所在的区域，它相对于上下文对象来说是静态的，在编写代码时就确定了
			2）分类：分为全局作用域和函数作用域（也叫局部作用域），ES6之前没有块作用域
			3）作用：隔离变量，不同作用域下同名变量不会有冲突
		
		（2）作用域与执行上下文
			1）区别1：
				① 除了全局作用域之外，每个函数都会创建自己的作用域，作用域是在函数定义时就确定了，而不是在函数调用时才创建
				② 全局上下文环境是在 全局作用域确定之后，js 代码开始执行之前创建的
				③ 函数执行上下文环境是在调用函数时，函数体代码执行之前创建
			2）区别2：
				① 作用域是静态的，只要函数定义好了就一直存在，且不会变化
					（作用域的个数 n+1个，n代表函数个数，1代表全局作用域，有且只有1个）
				② 上下文环境是动态的，调用函数时创建，函数调用结束时上下文环境就会被释放
					（上下文环境对象个数 n+1个，n代表函数调用的次数，1代表全局执行上下文对象，有且只有1个）
			3）两者之间的联系
				① 执行上下文环境对象是从属于所在的作用域（用于存储该作用域预处理的数据内容）
				② 全局上下文环境对应全局作用域
				③ 函数上下文环境对应函数的作用域
		（3）作用域链
			1）理解：多个上下级关系的作用域形成的链，它的方向是由内向外（从下到上），查找变量时就是沿着作用域链来查找的
			2）查找变量的规则：
				① 先在当前的作用域下的执行上下文对象中查找对应的属性，如果有则直接返回，否则就会进入上一级作用域中查找
				② 在上一级作用域的执行上下文对象中查找对应的属性，如果找到了就直接返回，否则就会再进入上一级作用域中继续寻找
				③ 如果在上上一级还没找到就再重复相同的操作，直到找到全局作用域中的全局上下文对象，如果找到 了就直接返回，
				如果还是没有找到，那就报错了
			3）作用域面试题：
				面试题1: 结果输出多少?
					  var x = 10;
					  function fn() {
						console.log(x);    // 10
					  }
					  function show(f) {  //实参传fn即相当于：f = fn
						var x = 20;
						f();   // fn() 即在这里调用了fn函数,执行fn作用域的上下文环境，执行相关代码逻辑
					  }
					  show(fn)
					  
				面试题2：说说它们的输出情况	
					var fn = function () {
						//ƒ () {console.log(fn)} ,因为在全局已经预处理var fn, 然后给fn赋值一个函数，再fn()调用
						console.log(fn)   
					}
					fn()
					
					var obj = {
						fn2: function () {
							//直接写fn2表示它是全局中那个的fn2，到全局中找fn2没有，所以报错
							console.log(fn2)   // 报错fn2未定义 
							// this.fn2说明fn2是this指向的对象的属性（方法），在该对象中找到就返回，找不到就是undefined
						    console.log(this.fn2)   // function () { console.log(this.fn2) }
							// 访问一个不存在的属性就是返回undefined
						    console.log(this.fn3)   // undefined
						}
					}
	5、闭包
		（1）闭包的概念：
			1）如何产生闭包?
				当一个嵌套的内部函数引用了嵌套外部函数的变量，同时外部函数调用时，js引擎回产生一个虚拟的对象（不是真实存在），
				就称该对象为闭包
			2）产生闭包的三个必备条件：（缺一不可）
				① 函数嵌套
				② 内部函数引用外部函数的数据（变量/函数）
				③ 外部函数调用
				当产生闭包的条件满足了，可以在浏览器查看中查看，打开控制台-->Sources-->scope-->local-->内部函数-->[[Scope]]
				看看这里是否有 Closure,有就代表闭包产生了，闭包里包含了引用外部函数的变量
			3）闭包到底是什么?
				* 使用chrome调试查看
				* 理解一: 闭包是嵌套的内部函数(绝大部分人)
				* 理解二: 包含被引用变量的对象(极少数人)（该对象不是真实的js对象）
				* 注意: 闭包存在于嵌套的内部函数中
			4）常见的闭包
				① 将函数作为另一个函数的返回值
						function fn1() {
							var a = 2
							function fn2() {
							  a++
							  console.log(a)
							}
							return fn2
						}
						var f = fn1()   // f 保存了内部函数对象的引用，保证内部函数对象没有成为垃圾对象
						f() // 3         // 闭包一直存在  ,可以在控制台Sources中给a++打断点观察闭包的变化情况
						f() // 4
						f()  //  5
				② 将函数作为实参传递给另一个函数调用
						function showMsgDelay(msg, time) {
							setTimeout(function () {
							  console.log(msg)
							}, time)
						}
						showMsgDelay('hello', 1000)   // 闭包存在的时间是1s
			5）闭包的作用
				① 使函数内部的变量在函数执行完毕后，仍然存活在内存中（即延长了局部变量的生命周期）
				② 让外部函数可以间接操作到函数内部的数据（变量/函数）
			6）闭包的生命周期
				① 产生：分两种情况（前提是满足产生闭包的那三个条件）
					* 当嵌套的内部函数是用声明式方式定义时，那么函数定义执行完时就产生了（注意不是调用）
					* 当嵌套的内部函数是用var字面量表达式来定义时，那么给定义的函数变量赋值时才产生
				② 死亡：
					当嵌套的内部函数变成垃圾对象时（将内部函数设置为null）
					
			7）闭包的应用: 定义JS模块
				  * 具有特定功能的js文件
				  * 将所有的数据和功能都封装在一个函数内部(私有的)
				  * 只向外暴露一个包信n个方法的对象或函数
				  * 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能		
					
			8）闭包的缺点
					  * 函数执行完后, 函数内的局部变量没有释放, 占用内存时间会变长
					  * 容易造成内存泄露，从而导致内存溢出
				*解决
					  * 能不用闭包就不用
					  * 及时释放		
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
		