
一、数据类型：
	1、分类：（分两大类）
		（1）基本类型（也叫值类型）
			* Number: 任意数值
			* String: 任意文本
			* Boolean: true/false
			* undefined: undefined
			* null: null
		（2）对象类型（也叫引用类型）
			* Object: 任意对象（一般用于存无序的数据）
			* Array: 特别的对象类型(下标/内部数据有序)（一般用于存有序的数据）
			* Function: 特别的对象类型(可执行)（一般用于存重复执行的代码）			
	2、判断类型：
		（1）typeof: 返回的是数据类型的字符串表达式
			1) 可以区别：数值、字符串、布尔值、undefined、function
			2）不能区别：null与对象，一般对象与数组
		（2）instanceof:
			专门用来判断对象数据的具体类型：Object,Array与Function
		（3）=== ：全等
			可以判断： undefined 和 null  （因为undefined 和 null都是只有一个值，所以可以用全等判断）
			
		// 1、基本类型的判断例子
		  var a
		  console.log(a, typeof a, a === 'undefined')  // undefined "undefined" false
		  console.log(a, typeof a, a === undefined)  // undefined "undefined"  true
		  console.log(a === typeof a)   // false 因为a是undefined，后者是"undefined"
		  a = 6
		  console.log(typeof a, typeof a === 'number')   // number true
		  a = 'hello world'
		  console.log(typeof a, typeof a === 'string')    // string true
		  a = true
		  console.log(typeof a, typeof a === 'boolean')   //  boolean true
		  a = null
		  console.log(typeof a)  // object
		  console.log(a === null)  // true    null 不能用 typeof 来检查，要用全等来检查
  
		 // 2、对象类型的例子
		  var b1 = {
			  b2: [2, 'abc', console.log],
			  b3: function () {
				  console.log('b3()')
			  }
		  }
		  console.log(b1 instanceof Object, typeof b1) // true "object"
		  console.log(b1.b2 instanceof Array, typeof b1.b2) // true "object"
		  console.log(b1.b3 instanceof Function, typeof b1.b3) // true "function"

		  console.log(typeof b1.b2[2]) // function  注意console.log(),log是个函数
		  /*
			b1.b2[2]('aaa')调用了console.log输出了aaa，但是console.log()函数没有返回值，
			  即为undefined，console.log(b1.b2[2]('aaa'))最后相当于执行console.log(undefined)
			  所以最后输出的是undefined
		   */
		  console.log(b1.b2[2]('aaa')) // aaa   undefined
	3、undefined与null的区别
		undefined代表没有赋值；null代表赋值了, 只是值为null
	4、什么时候给变量赋值为null呢?
		（1）在程序的前面：起暗示作用，后面会赋值为对象，进行计算，处理产生对象并保存
		* var a = null //a将指向一个对象, 但对象此时还没有确定（初始化变量a）
		（2）中间给b赋值
			b = {
					name: 'Tom'，
					age: 12
			  }
		（3）在程序的后面：b指向的对象就没有了指向它的引用，就称为垃圾对象从而被垃圾器回收
				但是因为b时全局变量，b并没有释放，而是一致存在,只是之前被对象占用的内存被释
				放了，其他数据可以来使用b所在的内存了
		* a = null //让a指向的对象成为垃圾对象 （结束时将a=null，释放资源）
	5、严格区别变量类型与数据类型?
		  * js的变量本身是没有类型的, 变量的类型实际上是变量内存中数据的类型
		  * 变量类型:
			* 基本类型: 保存基本类型数据的变量
			* 引用类型: 保存对象地址值的变量
		  * 数据对象
			* 基本类型
			* 对象类型

二、数据-变量-内存
	1. 什么是数据?
		* 存储于内存中代表特定信息的'东东', 本质就是0101二进制
		* 具有可读和可传递的基本特性：一般等号左边的就是写操作，其他的都是读操作
		* 万物(一切)皆数据, 函数也是数据（如何证明函数也是数据：函数传一个函数）
		* 程序中所有操作的目标: 都是数据
			* 算术运算
			* 逻辑运算
			* 赋值
			* 调用函数传参
	2. 什么是内存?
	  * 内存条通电后产生的存储空间(临时的)
	  * 产生和死亡: 内存条(集成电路板)==>通电==>产生一定容量的存储空间==>存储各种数据==>断电==>内存全部消失
	  * 内存的空间是临时的, 而硬盘的空间是持久的
	  * 一块内存包含2个数据
		* 内部存储的数据(一般数据/地址数据)
		* 内存地址值数据
	  * 内存分类
		* 栈: 全局变量, 局部变量 (空间较小)
		* 堆: 对象 (空间较大)
	3. 什么是变量?
	  * 值可以变化的量, 由变量名与变量值组成
	  * 一个变量对应一块小内存, 变量名用来查找到内存, 变量值就是内存中保存的内容
	4. 内存,数据, 变量三者之间的关系
	  * 内存是一个容器, 用来存储程序运行需要操作的数据
	  * 变量是内存的标识, 我们通过变量找到对应的内存, 进而操作(读/写)内存中的数据
	  
	5、问题: var a = xxx, a内存中到底保存的是什么?
		这要取决于xxx的值是什么类型的，举例说明：
			var a = 3  // a保存的3， 是基本类型变量
			a = {}  //ａ　保存的是{}的地址值，是与引用类型变量
			var b = 'abc'
			a = b　// a 保存的时 b 的值（'abc'）,是基本类型变量
			b = []
			a = b  // a 保存的是b的值（地址值），是引用类型变量
	6、关于引用变量赋值问题
		* 2个引用变量指向同一个对象, 通过一个引用变量修改对象内部数据, 另一个引用变量也看得见
			  var obj1 = {}
			  var obj2 = obj1
			  obj2.name = 'Tom'
			  console.log(obj1.name)   // Tom
			  function f1(obj) {  // obj = obj2 ,那么此时obj/obj1/obj2三个变量都指向同一个对象{}
				obj.age = 12    // 任意一个引用变量来修改对象内部的数据，其他两个引用变量也看得见
			  }
			  f1(obj2)
			  console.log(obj1.age)   // 12
			
		* 2个引用变量指向同一个对象,让一个引用变量指向另一个对象, 另一个引用变量还是指向原来的对象，
				修改其中一个变量不会引起另一个变量的变化
			   var obj3 = {name: 'Tom'}
			   var obj4 = obj3
			   obj3 = {name: 'JACK'}
			   console.log(obj4.name)    // Tom ，obj4还是指向{name: 'Tom'}对象，而obj3指向的是{name: 'JACK'}对象
			   function f2(obj) {  // obj = obj4
				 obj = {name: 'Bob'}  // 这一步将 obj 切断对obj4指向的对象的引用，重新指向另一个新对象{name: 'Bob'}
			   }
			   f2(obj4)
			   console.log(obj4.name)   // Tom
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  